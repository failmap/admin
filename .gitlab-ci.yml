stages:
  - test
  - build

# functional testing
test: &test_template
  stage: test

  image: python:3.4

  # temporary ignore failures to allow development of pipeline
  allow_failure: true

  cache:
    paths:
    - ~/.cache/pip/

  before_script:
    - pip install tox

  script:
    - tox -e py34

# code quality checks
check:
  <<: *test_template
  script:
    - tox -e check

# create distributable release
build:
  stage: build

  image: docker:git
  services:
  - docker:dind
  script:
    # build docker image and push to registry
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build -t registry.gitlab.com/failmap/admin .
    - docker push registry.gitlab.com/failmap/admin:latest
  # temporary to develop build pipeline
  #  only:
  #  - master


# provide codequality context for merge requests
codequality:
  stage: test

  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay
  services:
    - docker:dind
  script:
    - docker pull codeclimate/codeclimate
    # generate linter configurations
    - docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate init
    # run code quality
    - docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze -f json > codeclimate.json
  artifacts:
    paths: [codeclimate.json]
