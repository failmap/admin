stages:
  - test
  - build
  - staging
  - production

# functional testing
test: &test_template
  stage: test

  # allow all jobs to be run on unprivileged runners (our own) unless otherwise configured (empty tags list)
  tags:
      - unprivileged

  image: python:3

  cache:
    paths:
    - ~/.cache/pip/

  before_script:
    - pip install tox

  script:
    - tox -e py34

# functional testing using mysql database instead of sqlite
test_mysql: &test_mysql_template
  <<: *test_template
  services:
    - mysql:5.5
  # do not run these jobs on unprivileged runners
  tags: []
  variables:
    # configuration for docker mysql service
    MYSQL_ROOT_PASSWORD: failmap
    MYSQL_DATABASE: failmap
    MYSQL_USER: failmap
    MYSQL_PASSWORD: failmap
    # select mysql database settings, all settings default to 'failmap'
    # so they don't need to be passed explicitly
    DJANGO_DATABASE: production
    # add mysqlclient to tox environment
    TOX_EXTRA_DEPS: -rrequirements.deploy.txt

# functional testing using postgres database instead of sqlite
test_postgres: &test_postgres_template
  <<: *test_template
  services:
    # current version in debian jessie
    - postgres:9.4
  # do not run these jobs on unprivileged runners
  tags: []
  variables:
    # configuration for docker mysql service
    POSTGRES_DB: failmap
    POSTGRES_USER: failmap
    POSTGRES_PASSWORD: failmap
    # select mysql database settings, all settings default to 'failmap'
    # so they don't need to be passed explicitly
    DJANGO_DATABASE: production
    DB_ENGINE: postgresql_psycopg2
    DB_HOST: postgres
    # add mysqlclient to tox environment
    TOX_EXTRA_DEPS: -rrequirements.deploy.txt

# code quality checks
check:
  <<: *test_template
  script:
    - tox -e check

dataset:
  <<: *test_template
  script:
    - tox -e datasets

dataset_mysql:
  <<: *test_mysql_template
  script:
    - tox -e datasets

dataset_postgres:
  <<: *test_postgres_template
  script:
    - tox -e datasets


# create distributable release
build:
  stage: build

  services:
    - docker:dind

  image: docker:git

  before_script:
    - apk add --no-cache py-pip
    - pip install vdt.version

  script:
    # build docker image and push to registry
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build -t registry.gitlab.com/failmap/admin:build .
    - docker push registry.gitlab.com/failmap/admin:build
    # setup for pushing tags
    - git remote set-url --push origin $(echo $CI_BUILD_REPO | perl -pe 's#.*@(.+?(\:\d+)?)/#git@\1:#')
    # increment minor version and tag git repository
    - version --minor
    # push tag to git
    - git push --tags
    # push tag to docker registry
    - docker tag registry.gitlab.com/failmap/admin:build registry.gitlab.com/failmap/admin:$(git describe --tags --abbrev=0)
    - docker push registry.gitlab.com/failmap/admin:$(git describe --tags --abbrev=0)
  only:
    - master


# provide codequality context for merge requests
codequality:
  stage: test

  services:
    - docker:dind

  # do not run these jobs on unprivileged runners
  tags: []

  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay
  script:
    - docker pull codeclimate/codeclimate
    # generate linter configurations
    - docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate init
    # run code quality
    - docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze -f json > codeclimate.json
  artifacts:
    paths: [codeclimate.json]

staging:
  stage: staging

  image: docker:git
  services:
  - docker:dind
  script:
    # build docker image and push to registry
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker pull registry.gitlab.com/failmap/admin:build
    - docker tag registry.gitlab.com/failmap/admin:build registry.gitlab.com/failmap/admin:staging

    # here is where I would put my staging integration tests, if I had one!!!

    - docker push registry.gitlab.com/failmap/admin:staging

  only:
    - master

production:
  stage: production

  image: docker:git
  services:
  - docker:dind
  script:
    # build docker image and push to registry
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker pull registry.gitlab.com/failmap/admin:staging
    - docker tag registry.gitlab.com/failmap/admin:staging registry.gitlab.com/failmap/admin:latest
    - docker push registry.gitlab.com/failmap/admin:latest

  only:
    - master
