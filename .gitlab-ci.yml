stages:
  - test
  - build
  - staging
  - production

# functional testing
test: &test_template
  stage: test

  image: python:3.4

  # temporary ignore failures to allow development of pipeline
  allow_failure: true

  cache:
    paths:
    - ~/.cache/pip/

  before_script:
    - pip install tox

  script:
    - tox -e py34

# functional testing using mysql database instead of sqlite
test_mysql: &test_mysql_template
  <<: *test_template
  services:
    - mysql:latest
  variables:
    # configuration for docker mysql service
    MYSQL_ROOT_PASSWORD: failmap
    MYSQL_DATABASE: failmap
    MYSQL_USER: failmap
    MYSQL_PASSWORD: failmap
    # configuration for django
    DB_HOST: mysql
    DB_ENGINE: mysql
    DB_NAME: failmap
    DB_NAME: failmap
    DB_USER: failmap
    DB_PASSWORD: failmap

# code quality checks
check:
  <<: *test_template
  script:
    - tox -e check

dataset:
  <<: *test_template
  script:
    - tox -e datasets

dataset_mysql:
  <<: *test_mysql_template
  script:
    - tox -e datasets


# create distributable release
build:
  stage: build

  image: docker:git
  services:
  - docker:dind
  script:
    # build docker image and push to registry
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build -t registry.gitlab.com/failmap/admin:build .
    - docker push registry.gitlab.com/failmap/admin:build
  # temporary to develop build pipeline
  #  only:
  #  - master


# provide codequality context for merge requests
codequality:
  stage: test

  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay
  services:
    - docker:dind
  script:
    - docker pull codeclimate/codeclimate
    # generate linter configurations
    - docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate init
    # run code quality
    - docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze -f json > codeclimate.json
  artifacts:
    paths: [codeclimate.json]

staging:
  stage: staging

  image: docker:git
  services:
  - docker:dind
  script:
    # build docker image and push to registry
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker pull registry.gitlab.com/failmap/admin:build

    # here is where I would put my staging integration tests, if I had one!!!

    - docker push registry.gitlab.com/failmap/admin:staging

production:
  stage: production

  image: docker:git
  services:
  - docker:dind
  script:
    # build docker image and push to registry
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker pull registry.gitlab.com/failmap/admin:staging
    - docker push registry.gitlab.com/failmap/admin:latest

