stages:
  - test
  - bump
  - build
  - staging
  - production

# functional testing
test: &test_template
  stage: test

  image: websecmap/ci:latest

  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
    PIP_DISABLE_PIP_VERSION_CHECK: 1
  cache:
    paths:
      - ".pip-cache"
    key: "$CI_JOB_NAME"

  script:
    - make test

  retry: 1

# functional testing using mysql database instead of sqlite
test_mysql: &test_mysql_template
  <<: *test_template
  services:
    - mysql:5.6
  variables:
    # configuration for docker mysql service
    MYSQL_ROOT_PASSWORD: failmap
    MYSQL_DATABASE: failmap
    MYSQL_USER: failmap
    MYSQL_PASSWORD: failmap
    # select mysql database settings, all settings default to 'failmap'
    # so they don't need to be passed explicitly
    DJANGO_DATABASE: production
  retry: 1
  # install mysql dependencies
  before_script:
    - poetry install --develop=websecmap --extras=deploy

# functional testing using postgres database instead of sqlite
test_postgres: &test_postgres_template
  <<: *test_template
  services:
    # current version in debian jessie
    - postgres:9.4
  variables:
    # configuration for docker mysql service
    POSTGRES_DB: failmap
    POSTGRES_USER: failmap
    POSTGRES_PASSWORD: failmap
    # select mysql database settings, all settings default to 'failmap'
    # so they don't need to be passed explicitly
    DJANGO_DATABASE: production
    DB_ENGINE: postgresql_psycopg2
    DB_HOST: postgres
  retry: 1
  # install postgresql dependencies
  before_script:
    - poetry install --develop=websecmap --extras=deploy

# code quality checks
check:
  <<: *test_template
  stage: test

  script:
    - make check
    - shellcheck tests/*.sh tools/*.sh

# integration tests
integration:
  <<: *test_template
  stage: test

  services:
    - redis:latest

  variables:
    BROKER: redis://redis:6379/0
    # required to run celery worker under docker 'root' user
    C_FORCE_ROOT: 1

  script:
    - make test_integration

dataset:
  <<: *test_template
  script:
    - make test_datasets

dataset_mysql:
  <<: *test_mysql_template
  script:
    - make test_datasets
  # run long tests only on master
  only: [master]

dataset_postgres:
  <<: *test_postgres_template
  script:
    - make test_datasets
  # run long tests only on master
  only: [master]

bump:
  stage: bump

  image: websecmap/ci:latest

  script:
    - poetry version patch
    - git add pyproject.toml
    - git ci -m "Bump version to $(sed -En 's/^version = "(.*)"/\1/p' pyproject.toml)"
    - git tag $(sed -En 's/^version = "(.*)"/\1/p' pyproject.toml)
    - git push
    - git push --tags

# create distributable release
build:
  stage: build

  services:
    - docker:dind

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  image: websecmap/ci:docker-git

  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"

  script:
    # store current version as artifact to copy into docker container
    - sed -En 's/^version = "(.*)"/\1/p' pyproject.toml > version

    # build docker image and push to registry
    - time docker build . --tag websecmap/websecmap:build
    - docker push websecmap/websecmap:build

    # push version tag to docker registry
    - docker tag websecmap/websecmap:build websecmap/websecmap:$(cat version|tr + _)
    - docker push websecmap/websecmap:$(cat version|tr + _)

  only:
    - master
    - tags
  retry: 1

# test building image & run image smoketest
image_test:
  stage: test

  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
    PIP_DISABLE_PIP_VERSION_CHECK: 1
    SYSTEM_TEST_TIMEOUT: "120"
    GIT_SUBMODULE_STRATEGY: recursive
  cache:
    paths:
      - "$CI_PROJECT_DIR/.pip-cache"
    # use cache from 'test' job to import it in docker container
    # for quicker docker builds
    key: "test"
    # don't update the cache after run as it will not be updated
    # by this job
    policy: pull

  services:
    - docker:dind

  image: websecmap/ci:docker-git

  before_script:
    - pip install pytest pytest-logging retry

  script:
    # build docker image to test building
    - time docker build . --tag websecmap/websecmap:latest

    # run simple smoketests to verify Docker image is sane
    - time tests/docker.sh docker

    # run system tests against image
    - time make test_system

  # run on merge request to determine if build will not break on master
  except: [master]
  retry: 1

test_system:
  stage: staging

  image: websecmap/ci:docker-git
  services:
  - docker:dind

  variables:
    SYSTEM_TEST_TIMEOUT: 120
    PIP_DISABLE_PIP_VERSION_CHECK: 1
    IMAGE: websecmap/websecmap:build

  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - pip install pytest pytest-logging retry

  script:
    - time make test_system

  only: [master]
  retry: 1

staging:
  stage: staging

  image: websecmap/ci:docker-git
  services:
  - docker:dind

  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"

  script:
    # store current version as artifact to copy into docker container
    - python3 setup.py --version > version
    - export tag=$(cat version|tr + _)

    # pull latest version and tag as staging
    - docker pull websecmap/websecmap:$tag
    - docker tag websecmap/websecmap:$tag websecmap/websecmap:staging

    # here is where I would put my staging integration tests, if I had one!!!

    # promote to staging after tests have succeeded
    - docker push websecmap/websecmap:staging

    # until there is a CD staging environment
    - docker tag websecmap/websecmap:$tag websecmap/websecmap:latest
    - docker push websecmap/websecmap:latest

  only: [master]
  retry: 1

production:
  stage: production

  image: websecmap/ci:docker-git
  services:
  - docker:dind

  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"

  script:
    - export tag=$(git describe --exact-match --tags --abbrev=0)
    # build docker image and push to registry
    - docker pull websecmap/websecmap:$tag
    - docker tag websecmap/websecmap:$tag websecmap/websecmap:latest
    - docker push websecmap/websecmap:latest

    # insert deploy magic here

  only: [tags]
  retry: 1
