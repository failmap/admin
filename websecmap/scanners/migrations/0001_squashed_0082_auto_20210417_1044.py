# Generated by Django 3.1.6 on 2021-04-17 10:45

from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:


class Migration(migrations.Migration):

    replaces = [
        ("scanners", "0001_initial"),
        ("scanners", "0002_auto_20170226_2007"),
        ("scanners", "0003_tlsqualysscan_rating_determined_on"),
        ("scanners", "0004_auto_20170227_1622"),
        ("scanners", "0005_auto_20170310_0910"),
        ("scanners", "0006_endpoint_url"),
        ("scanners", "0007_auto_20170316_1036"),
        ("scanners", "0008_auto_20170908_1218"),
        ("scanners", "0009_endpoint_discovered_on"),
        ("scanners", "0010_auto_20170911_1635"),
        ("scanners", "0011_screenshot"),
        ("scanners", "0012_auto_20170913_1224"),
        ("scanners", "0013_auto_20170913_1305"),
        ("scanners", "0014_state"),
        ("scanners", "0015_auto_20170915_0944"),
        ("scanners", "0016_auto_20170922_1612"),
        ("scanners", "0017_auto_20170922_1616"),
        ("scanners", "0018_auto_20170922_1723"),
        ("scanners", "0019_auto_20170927_1222"),
        ("scanners", "0020_auto_20171013_1004"),
        ("scanners", "0021_auto_20171030_1703"),
        ("scanners", "0022_auto_20171030_1716"),
        ("scanners", "0023_endpointip_url"),
        ("scanners", "0024_auto_20171030_2042"),
        ("scanners", "0025_auto_20171030_2111"),
        ("scanners", "0026_auto_20171110_1237"),
        ("scanners", "0027_auto_20171113_1028"),
        ("scanners", "0028_auto_20171113_1203"),
        ("scanners", "0029_auto_20171113_1233"),
        ("scanners", "0030_auto_20171113_1240"),
        ("scanners", "0031_auto_20171116_1451"),
        ("scanners", "0032_auto_20180208_1318"),
        ("scanners", "0033_auto_20180301_2054"),
        ("scanners", "0034_auto_20180302_1633"),
        ("scanners", "0035_auto_20180302_1722"),
        ("scanners", "0036_auto_20180302_1741"),
        ("scanners", "0032_auto_20180119_1144"),
        ("scanners", "0037_merge_20180313_1044"),
        ("scanners", "0038_auto_20180313_1045"),
        ("scanners", "0039_delete_state"),
        ("scanners", "0040_auto_20180523_1856"),
        ("scanners", "0041_tlsscan"),
        ("scanners", "0042_auto_20180814_1415"),
        ("scanners", "0043_auto_20180917_1748"),
        ("scanners", "0044_auto_20180918_0842"),
        ("scanners", "0045_auto_20180918_0859"),
        ("scanners", "0046_auto_20180918_1216"),
        ("scanners", "0047_auto_20180918_1217"),
        ("scanners", "0048_auto_20181009_1315"),
        ("scanners", "0049_auto_20181031_1300"),
        ("scanners", "0050_auto_20181114_0735"),
        ("scanners", "0051_internetnlscan"),
        ("scanners", "0052_auto_20181122_1510"),
        ("scanners", "0053_auto_20181122_1514"),
        ("scanners", "0054_auto_20181213_1012"),
        ("scanners", "0055_auto_20181213_1218"),
        ("scanners", "0056_scanproxy"),
        ("scanners", "0057_scanproxy_protocol"),
        ("scanners", "0058_auto_20190111_1634"),
        ("scanners", "0059_scanproxy_manually_disabled"),
        ("scanners", "0060_auto_20190116_0937"),
        ("scanners", "0061_auto_20190327_1017"),
        ("scanners", "0062_auto_20190411_1504"),
        ("scanners", "0063_auto_20190412_1132"),
        ("scanners", "0064_auto_20190423_0843"),
        ("scanners", "0065_auto_20190604_1126"),
        ("scanners", "0066_internetnlscan_last_check"),
        ("scanners", "0067_screenshot_image"),
        ("scanners", "0068_auto_20190906_0759"),
        ("scanners", "0069_scanproxy_last_claim_at"),
        ("scanners", "0070_internetnlv2scan_internetnlv2statelog"),
        ("scanners", "0071_auto_20200506_1308"),
        ("scanners", "0072_auto_20200506_1313"),
        ("scanners", "0073_plannedscan_plannedscanerror"),
        ("scanners", "0074_auto_20200805_0735"),
        ("scanners", "0075_auto_20200807_1237"),
        ("scanners", "0076_auto_20200816_0944"),
        ("scanners", "0077_auto_20200820_1254"),
        ("scanners", "0078_auto_20200824_1759"),
        ("scanners", "0079_plannedscanstatistic"),
        ("scanners", "0080_auto_20200907_0820"),
        ("scanners", "0081_auto_20210415_1758"),
        ("scanners", "0082_auto_20210417_1044"),
    ]

    initial = True

    dependencies = [
        ("organizations", "0002_auto_20170226_2007"),
        ("organizations", "0007_url_created_on"),
        ("organizations", "0022_auto_20180208_1318"),
        ("organizations", "0058_organization_surrogate_id"),
        ("organizations", "0018_auto_20171017_1317"),
    ]

    operations = [
        migrations.CreateModel(
            name="Endpoint",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("domain", models.CharField(max_length=255)),
                ("server_name", models.CharField(max_length=255)),
                ("ip", models.CharField(max_length=255)),
                ("port", models.IntegerField(default=443)),
                ("protocol", models.CharField(max_length=20)),
                ("is_dead", models.IntegerField(default=False)),
                ("is_dead_since", models.DateTimeField(blank=True, null=True)),
                ("is_dead_reason", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "url",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="organizations.url"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TlsQualysScratchpad",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("domain", models.CharField(max_length=255)),
                ("when", models.DateTimeField(auto_now_add=True)),
                ("data", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="TlsQualysScan",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("qualys_rating", models.CharField(default=0, max_length=3)),
                ("qualys_rating_no_trust", models.CharField(default=0, max_length=3)),
                ("pending", models.BooleanField(default=0)),
                ("pending_since", models.DateTimeField(null=True)),
                ("scan_date", models.DateField(auto_now_add=True)),
                ("scan_time", models.TimeField(auto_now_add=True)),
                ("scan_moment", models.DateTimeField(auto_now_add=True)),
                ("endpoint", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="scanners.endpoint")),
                ("rating_determined_on", models.DateTimeField()),
            ],
            options={
                "db_table": "scanner_tls_qualys",
                "managed": True,
            },
        ),
        migrations.RemoveField(
            model_name="endpoint",
            name="domain",
        ),
        migrations.RenameField(
            model_name="tlsqualysscan",
            old_name="scan_moment",
            new_name="last_scan_moment",
        ),
        migrations.AlterField(
            model_name="tlsqualysscan",
            name="last_scan_moment",
            field=models.DateTimeField(auto_now_add=True, db_index=True),
        ),
        migrations.AddField(
            model_name="endpoint",
            name="discovered_on",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="tlsqualysscan",
            name="qualys_message",
            field=models.CharField(
                blank=True, help_text="Whatever Qualys said about the endpoint", max_length=255, null=True
            ),
        ),
        migrations.AlterField(
            model_name="endpoint",
            name="is_dead",
            field=models.IntegerField(
                default=False,
                help_text="If the port is closed, or the endpoint is otherwisenot reachable over the specified protocol, then markit as dead. A scanner for this port/protocol can alsodeclare it dead. This port is closed on this protocol.",
            ),
        ),
        migrations.RemoveField(
            model_name="endpoint",
            name="server_name",
        ),
        migrations.RemoveField(
            model_name="tlsqualysscan",
            name="pending",
        ),
        migrations.RemoveField(
            model_name="tlsqualysscan",
            name="pending_since",
        ),
        migrations.RemoveField(
            model_name="endpoint",
            name="ip",
        ),
        migrations.AlterField(
            model_name="endpoint",
            name="port",
            field=models.IntegerField(default=443, help_text="Ports range from 1 to 65535."),
        ),
        migrations.AlterField(
            model_name="endpoint",
            name="protocol",
            field=models.CharField(
                help_text="Mostly application layer protocols, such as HTTP, FTP,SSH and so on. For more, read here: https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol",
                max_length=20,
            ),
        ),
        migrations.CreateModel(
            name="EndpointGenericScanScratchpad",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        db_index=True,
                        help_text="The type of scan that was performed. Instead of having different tables for eachscan, this label separates the scans.",
                        max_length=60,
                    ),
                ),
                (
                    "domain",
                    models.CharField(
                        blank=True,
                        help_text="Deprecated. Used when there is no known Endpoint.",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("at_when", models.DateTimeField(auto_now_add=True)),
                ("data", models.TextField(help_text="Whatever data to dump for debugging purposes.")),
            ],
        ),
        migrations.CreateModel(
            name="Screenshot",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("filename", models.CharField(max_length=255)),
                ("width_pixels", models.IntegerField(default=0)),
                ("height_pixels", models.IntegerField(default=0)),
                ("created_on", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "endpoint",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="scanners.endpoint"
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        default=None,
                        height_field="height_pixels",
                        null=True,
                        upload_to="screenshots/",
                        width_field="width_pixels",
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="endpoint",
            name="url",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="organizations.url"
            ),
        ),
        migrations.AddField(
            model_name="endpoint",
            name="ip_version",
            field=models.IntegerField(
                default=4,
                help_text="Either 4: IPv4 or 6: IPv6. There are basically two possibilities to reach the endpoint, which due to immaturity often look very different. The old way is using IPv4addresses (4) and the newer method is uing IPv6 (6). The internet looks a whole lotdifferent between IPv4 or IPv6. That shouldn't be the case, but it is.",
            ),
        ),
        migrations.CreateModel(
            name="UrlIp",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "ip",
                    models.CharField(
                        help_text="IPv4 or IPv6 Address. Addresses have to be normalized to the compressed representation: removing as many zeros as possible. For example:  IPv6: abcd:0000:0000:00fd becomes abcd::fd, or IPv4: 127.000.000.001 = 127.0.0.1",
                        max_length=255,
                    ),
                ),
                (
                    "rdns_name",
                    models.CharField(
                        blank=True,
                        help_text="The reverse name can be a server name, containing a provider or anything else.It might contain the name of a yet undiscovered url or hint to a service.",
                        max_length=255,
                    ),
                ),
                ("discovered_on", models.DateTimeField(blank=True, null=True)),
                (
                    "is_unused",
                    models.IntegerField(
                        default=False,
                        help_text="If the address was used in the past, but not anymore.It's possible that the same address is more than once associated with and endpoint over time, as some providersrotate a set of IP addresses.",
                    ),
                ),
                ("is_unused_since", models.DateTimeField(blank=True, null=True)),
                ("is_unused_reason", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "url",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="organizations.url"
                    ),
                ),
            ],
            options={
                "verbose_name": "urlip",
                "verbose_name_plural": "urlip",
            },
        ),
        migrations.AlterField(
            model_name="endpoint",
            name="is_dead",
            field=models.BooleanField(
                default=False,
                help_text="If the port is closed, or the endpoint is otherwisenot reachable over the specified protocol, then markit as dead. A scanner for this port/protocol can alsodeclare it dead. This port is closed on this protocol.",
            ),
        ),
        migrations.AlterField(
            model_name="endpoint",
            name="is_dead",
            field=models.BooleanField(
                default=False,
                help_text="Use the 'declare dead' button to autofill the date. If the port is closed, or the endpoint is otherwisenot reachable over the specified protocol, then markit as dead. A scanner for this port/protocol can alsodeclare it dead. This port is closed on this protocol.",
            ),
        ),
        migrations.AlterField(
            model_name="endpoint",
            name="protocol",
            field=models.CharField(
                help_text="Lowercase. Mostly application layer protocols, such as HTTP, FTP,SSH and so on. For more, read here: https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol",
                max_length=20,
            ),
        ),
        migrations.AlterModelOptions(
            name="endpoint",
            options={"verbose_name": "endpoint", "verbose_name_plural": "endpoint"},
        ),
        migrations.AddField(
            model_name="tlsqualysscan",
            name="comply_or_explain_explained_on",
            field=models.DateTimeField(
                blank=True,
                help_text="From this moment the rating will be muted.",
                null=True,
                verbose_name="explained on",
            ),
        ),
        migrations.AddField(
            model_name="tlsqualysscan",
            name="comply_or_explain_explanation_valid_until",
            field=models.DateTimeField(
                blank=True,
                help_text="Set to one year in the future. Will expire automatically after a scan finds a change on this service. As long as the rating stays the same, the finding is explained and the issue ignored.",
                null=True,
                verbose_name="explanation valid until",
            ),
        ),
        migrations.AddField(
            model_name="tlsqualysscan",
            name="comply_or_explain_is_explained",
            field=models.BooleanField(
                default=False,
                help_text="Shorthand to indicate that something is explained. Only when this field is set to True, the explanation is ",
                verbose_name="is explained",
            ),
        ),
        migrations.AddField(
            model_name="tlsqualysscan",
            name="comply_or_explain_case_additional_notes",
            field=models.TextField(
                blank=True,
                default="",
                help_text="Notes about the scenario for follow up. Things such as phone numbers, mail addresses, contact info.Will not be exported, but are not secret.",
                max_length=512,
                null=True,
                verbose_name="additional case notes",
            ),
        ),
        migrations.AddField(
            model_name="tlsqualysscan",
            name="comply_or_explain_case_handled_by",
            field=models.CharField(
                blank=True,
                default="",
                help_text="Who entered the comply-or-explain information, so it's easy to find the right person to talk to in case of follow-ups.",
                max_length=255,
                null=True,
                verbose_name="case handled by",
            ),
        ),
        migrations.AddField(
            model_name="tlsqualysscan",
            name="comply_or_explain_explained_by",
            field=models.CharField(
                blank=True,
                default="",
                help_text="Please also refer to a thread, discussion or another fact that can be verified.",
                max_length=255,
                null=True,
                verbose_name="explained by",
            ),
        ),
        migrations.AddField(
            model_name="tlsqualysscan",
            name="comply_or_explain_explanation",
            field=models.TextField(
                blank=True,
                default="",
                help_text="Text that helps explain why this result is not counted in the report. For example: a broken scanner or another edge-case that is mainly on the side of the scanning party. Having requested the supplier for a fix, or promising a fix should be stored as a promise, not as an explanation.",
                max_length=255,
                null=True,
                verbose_name="explanation",
            ),
        ),
        migrations.AlterModelOptions(
            name="tlsqualysscan",
            options={"managed": True, "ordering": ["-rating_determined_on"]},
        ),
        migrations.AlterField(
            model_name="tlsqualysscan",
            name="comply_or_explain_case_additional_notes",
            field=models.CharField(
                blank=True,
                default="",
                help_text="Notes about the scenario for follow up. Things such as phone numbers, mail addresses, contact info.Will not be exported, but are not secret.",
                max_length=1000,
                null=True,
                verbose_name="additional case notes",
            ),
        ),
        migrations.AlterField(
            model_name="tlsqualysscan",
            name="comply_or_explain_case_handled_by",
            field=models.CharField(
                blank=True,
                default="",
                help_text="Who entered the comply-or-explain information, so it's easy to find the right person to talk to in case of follow-ups.",
                max_length=512,
                null=True,
                verbose_name="case handled by",
            ),
        ),
        migrations.AlterField(
            model_name="tlsqualysscan",
            name="comply_or_explain_explained_by",
            field=models.CharField(
                blank=True,
                default="",
                help_text="Please also refer to a thread, discussion or another fact that can be verified.",
                max_length=512,
                null=True,
                verbose_name="explained by",
            ),
        ),
        migrations.AlterField(
            model_name="tlsqualysscan",
            name="comply_or_explain_explanation",
            field=models.CharField(
                blank=True,
                default="",
                help_text="Text that helps explain why this result is not counted in the report. For example: a broken scanner or another edge-case that is mainly on the side of the scanning party. Having requested the supplier for a fix, or promising a fix should be stored as a promise, not as an explanation.",
                max_length=1000,
                null=True,
                verbose_name="explanation",
            ),
        ),
        migrations.AddField(
            model_name="tlsqualysscan",
            name="is_the_latest_scan",
            field=models.BooleanField(
                default=False,
                help_text="Notes if this was the latest scan for this url/endpoint. Scanmanagers set this value.",
            ),
        ),
        migrations.CreateModel(
            name="EndpointGenericScan",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        db_index=True,
                        help_text="The type of scan that was performed. Instead of having different tables for eachscan, this label separates the scans.",
                        max_length=60,
                    ),
                ),
                (
                    "rating",
                    models.CharField(
                        default=0,
                        help_text="Preferably an integer, 'True' or 'False'. Keep ratings over time consistent.",
                        max_length=128,
                    ),
                ),
                (
                    "explanation",
                    models.CharField(
                        default=0,
                        help_text="Short explanation from the scanner on how the rating came to be.",
                        max_length=255,
                    ),
                ),
                (
                    "last_scan_moment",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="This gets updated when all the other fields stay the same. If one changes, anew scan will be saved, obsoleting the older ones.",
                    ),
                ),
                (
                    "rating_determined_on",
                    models.DateTimeField(
                        help_text="This is when the current rating was first discovered. It may be obsoleted byanother rating or explanation (which might have the same rating). This date cannot change once it's set."
                    ),
                ),
                (
                    "endpoint",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="scanners.endpoint"
                    ),
                ),
                (
                    "evidence",
                    models.CharField(
                        blank=True,
                        default=0,
                        help_text="Content that might help understanding the result.",
                        max_length=9001,
                    ),
                ),
                (
                    "comply_or_explain_case_additional_notes",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Notes about the scenario for follow up. Things such as phone numbers, mail addresses, contact info.Will not be exported, but are not secret.",
                        max_length=1000,
                        null=True,
                        verbose_name="additional case notes",
                    ),
                ),
                (
                    "comply_or_explain_case_handled_by",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Who entered the comply-or-explain information, so it's easy to find the right person to talk to in case of follow-ups.",
                        max_length=512,
                        null=True,
                        verbose_name="case handled by",
                    ),
                ),
                (
                    "comply_or_explain_explained_by",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Please also refer to a thread, discussion or another fact that can be verified.",
                        max_length=512,
                        null=True,
                        verbose_name="explained by",
                    ),
                ),
                (
                    "comply_or_explain_explained_on",
                    models.DateTimeField(
                        blank=True,
                        help_text="From this moment the rating will be muted.",
                        null=True,
                        verbose_name="explained on",
                    ),
                ),
                (
                    "comply_or_explain_explanation",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Text that helps explain why this result is not counted in the report. For example: a broken scanner or another edge-case that is mainly on the side of the scanning party.",
                        max_length=1000,
                        null=True,
                        verbose_name="explanation",
                    ),
                ),
                (
                    "comply_or_explain_explanation_valid_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="Set to one year in the future. Will expire automatically after a scan finds a change on this service. As long as the rating stays the same, the finding is explained and the issue ignored.",
                        null=True,
                        verbose_name="explanation valid until",
                    ),
                ),
                (
                    "comply_or_explain_is_explained",
                    models.BooleanField(
                        default=False,
                        help_text="Shorthand to indicate that something is explained. Only when this field is set to True, the explanation is ",
                        verbose_name="is explained",
                    ),
                ),
                (
                    "is_the_latest_scan",
                    models.BooleanField(
                        default=False,
                        help_text="Notes if this was the latest scan for this url/endpoint. Scanmanagers set this value.",
                    ),
                ),
            ],
            options={
                "ordering": ["-rating_determined_on"],
            },
        ),
        migrations.CreateModel(
            name="UrlGenericScan",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        db_index=True,
                        help_text="The type of scan that was performed. Instead of having different tables for eachscan, this label separates the scans.",
                        max_length=60,
                    ),
                ),
                (
                    "rating",
                    models.CharField(
                        default=0,
                        help_text="Preferably an integer, 'True' or 'False'. Keep ratings over time consistent.",
                        max_length=128,
                    ),
                ),
                (
                    "explanation",
                    models.CharField(
                        default=0,
                        help_text="Short explanation from the scanner on how the rating came to be.",
                        max_length=255,
                    ),
                ),
                (
                    "evidence",
                    models.CharField(
                        blank=True,
                        default=0,
                        help_text="Content that might help understanding the result.",
                        max_length=9001,
                    ),
                ),
                (
                    "last_scan_moment",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="This gets updated when all the other fields stay the same. If one changes, anew scan will be saved, obsoleting the older ones.",
                    ),
                ),
                (
                    "rating_determined_on",
                    models.DateTimeField(
                        help_text="This is when the current rating was first discovered. It may be obsoleted byanother rating or explanation (which might have the same rating). This date cannot change once it's set."
                    ),
                ),
                (
                    "url",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="organizations.url"
                    ),
                ),
                (
                    "comply_or_explain_case_additional_notes",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Notes about the scenario for follow up. Things such as phone numbers, mail addresses, contact info.Will not be exported, but are not secret.",
                        max_length=1000,
                        null=True,
                        verbose_name="additional case notes",
                    ),
                ),
                (
                    "comply_or_explain_case_handled_by",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Who entered the comply-or-explain information, so it's easy to find the right person to talk to in case of follow-ups.",
                        max_length=512,
                        null=True,
                        verbose_name="case handled by",
                    ),
                ),
                (
                    "comply_or_explain_explained_by",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Please also refer to a thread, discussion or another fact that can be verified.",
                        max_length=512,
                        null=True,
                        verbose_name="explained by",
                    ),
                ),
                (
                    "comply_or_explain_explained_on",
                    models.DateTimeField(
                        blank=True,
                        help_text="From this moment the rating will be muted.",
                        null=True,
                        verbose_name="explained on",
                    ),
                ),
                (
                    "comply_or_explain_explanation",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Text that helps explain why this result is not counted in the report. For example: a broken scanner or another edge-case that is mainly on the side of the scanning party.",
                        max_length=1000,
                        null=True,
                        verbose_name="explanation",
                    ),
                ),
                (
                    "comply_or_explain_explanation_valid_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="Set to one year in the future. Will expire automatically after a scan finds a change on this service. As long as the rating stays the same, the finding is explained and the issue ignored.",
                        null=True,
                        verbose_name="explanation valid until",
                    ),
                ),
                (
                    "comply_or_explain_is_explained",
                    models.BooleanField(
                        default=False,
                        help_text="Shorthand to indicate that something is explained. Only when this field is set to True, the explanation is ",
                        verbose_name="is explained",
                    ),
                ),
                (
                    "is_the_latest_scan",
                    models.BooleanField(
                        default=False,
                        help_text="Notes if this was the latest scan for this url/endpoint. Scanmanagers set this value.",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "ordering": ["-rating_determined_on"],
            },
        ),
        migrations.RenameField(
            model_name="tlsqualysscratchpad",
            old_name="when",
            new_name="at_when",
        ),
        migrations.CreateModel(
            name="ScanProxy",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "address",
                    models.CharField(
                        help_text="An internet address, including the http/https scheme. Works only on IP. Username / pass can beadded in the address. For example: https://username:password@192.168.1.1:1337/",
                        max_length=255,
                    ),
                ),
                (
                    "currently_used_in_tls_qualys_scan",
                    models.BooleanField(
                        default=False,
                        help_text="Set's the proxy as in use, so that another scanner knows that this proxy is being used at this moment. After a scan is completed, the flag has to be disabled. This of course goes wrong with crashes. So once in a while, if things fail or whatever, this might have to be resetted.",
                    ),
                ),
                (
                    "is_dead",
                    models.BooleanField(
                        default=False,
                        help_text="Use the 'declare dead' button to autofill the date. If the port is closed, or the endpoint is otherwisenot reachable over the specified protocol, then markit as dead. A scanner for this port/protocol can alsodeclare it dead. This port is closed on this protocol.",
                    ),
                ),
                ("is_dead_since", models.DateTimeField(blank=True, null=True)),
                ("is_dead_reason", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "out_of_resource_counter",
                    models.IntegerField(
                        default=0,
                        help_text="Every time the proxy has not enough resources, this number will increase with one. A too high number makes it easy not to use this proxy anymore.",
                    ),
                ),
                (
                    "protocol",
                    models.CharField(
                        default="https", help_text="Whether to see this as a http or https proxy", max_length=10
                    ),
                ),
                (
                    "check_result",
                    models.CharField(
                        default="Unchecked.", help_text="The result of the latest 'check proxy' call.", max_length=60
                    ),
                ),
                ("check_result_date", models.DateTimeField(blank=True, null=True)),
                (
                    "manually_disabled",
                    models.BooleanField(default=False, help_text="Proxy will not be used if manually disabled."),
                ),
                ("qualys_capacity_current", models.IntegerField(default=-1)),
                ("qualys_capacity_max", models.IntegerField(default=-1)),
                ("qualys_capacity_this_client", models.IntegerField(default=-1)),
                ("request_speed_in_ms", models.IntegerField(default=-1)),
                ("last_claim_at", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="InternetNLV2Scan",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(blank=True, help_text="mail, mail_dashboard or web", max_length=30, null=True),
                ),
                (
                    "scan_id",
                    models.CharField(
                        blank=True,
                        help_text="The scan ID that is used to request status and report information.",
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        help_text="where the scan is: registered, scanning, creating_report, finished, failed",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "state_message",
                    models.CharField(
                        blank=True,
                        help_text="Information about the status, for example error information.",
                        max_length=200,
                        null=True,
                    ),
                ),
                ("last_state_check", models.DateTimeField(blank=True, null=True)),
                ("metadata", jsonfield.fields.JSONField(blank=True, default=None, null=True)),
                ("retrieved_scan_report", jsonfield.fields.JSONField(blank=True, default=None, null=True)),
                ("subject_urls", models.ManyToManyField(to="organizations.Url")),
                (
                    "last_state_change",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this state changed the last time, so no in-between updates about the state.",
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="InternetNLV2StateLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="The state that was registered at a certain moment in time.",
                        max_length=255,
                    ),
                ),
                (
                    "state_message",
                    models.CharField(
                        blank=True,
                        help_text="Information about the status, for example error information.",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "last_state_check",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time this state was written to this field, which can happen regularly.",
                        null=True,
                    ),
                ),
                ("at_when", models.DateTimeField(blank=True, null=True)),
                (
                    "scan",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="scanners.internetnlv2scan"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PlannedScan",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "activity",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "unknown"), (1, "discover"), (2, "verify"), (3, "scan")],
                        db_index=True,
                        default=0,
                        help_text="discover, verify or scan",
                    ),
                ),
                (
                    "scanner",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "unknown"),
                            (1, "tls_qualys"),
                            (2, "dnssec"),
                            (3, "security_headers"),
                            (4, "plain_http"),
                            (5, "internet_nl_mail"),
                            (6, "ftp"),
                            (7, "dns_endpoints"),
                            (8, "internet_nl_web"),
                            (9, "subdomains"),
                            (10, "dns_known_subdomains"),
                            (11, "dns_clean_wildcards"),
                            (12, "http"),
                            (13, "verify_unresolvable"),
                            (14, "onboard"),
                            (15, "ipv6"),
                            (16, "dns_wildcard"),
                            (17, "dummy"),
                            (18, "screenshot"),
                        ],
                        db_index=True,
                        default=0,
                    ),
                ),
                (
                    "state",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "unknown"),
                            (1, "requested"),
                            (2, "picked_up"),
                            (3, "finished"),
                            (4, "error"),
                            (5, "timeout"),
                        ],
                        db_index=True,
                        default=0,
                    ),
                ),
                ("requested_at_when", models.DateTimeField()),
                ("finished_at_when", models.DateTimeField(help_text="when finished, timeout, error", null=True)),
                ("url", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="organizations.url")),
                ("last_state_change_at", models.DateTimeField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="PlannedScanError",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("debug_information", models.CharField(max_length=512)),
                (
                    "planned_scan",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="scanners.plannedscan"),
                ),
            ],
        ),
        migrations.DeleteModel(
            name="TlsQualysScan",
        ),
        migrations.CreateModel(
            name="PlannedScanStatistic",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("at_when", models.DateTimeField()),
                ("data", jsonfield.fields.JSONField()),
            ],
        ),
        migrations.AddIndex(
            model_name="plannedscan",
            index=models.Index(fields=["scanner", "activity", "state"], name="scanners_pl_scanner_b2f5af_idx"),
        ),
    ]
